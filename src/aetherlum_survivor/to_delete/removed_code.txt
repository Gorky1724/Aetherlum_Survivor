>>From <ControllerForModel> to instantiate and handle new GameLoop

    private GameLoop gameLoop;


    @Override
    public synchronized void startGameLoop() {
        /*SYNCHRONIZED prevents thread interference and memory consistency errors
        if morethreads need to read or write the same variables */
        
        if (this.gameLoop != null && this.gameLoop.isRunning()) { //gameLoop is already started
            return;
        }

        if (this.gameLoop != null && !this.gameLoop.isRunning()) { //gameLoop exists but is not running
            gameLoop.stopGame();
        }

        this.gameLoop = new GameLoop();
        this.gameLoop.run(); //the gameLoop starts

        System.out.println(">> GameLoop Running");
    }

    public synchronized void stopGameLoop() {
        if (this.gameLoop != null && this.gameLoop.isRunning()) {
            this.gameLoop.stopGame();
        }
    }
    
    public synchronized void pauseGameLoop() {
        if (this.gameLoop != null) {
            this.gameLoop.pauseGame();
        }
    }
    
    public synchronized void resumeGameLoop() {
        if (this.gameLoop != null) {
            this.gameLoop.resumeGame();
        }
    }
______________________________________________________________________________________________________________________________________________________
>> from <StartPanel>

    private void handleNewGameEvent() {
        //nested to avoid that requestSGL() is executed before openGamePanel()
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                ControllerForView.getInstance().openGamePanel();
                System.out.println(">> StartPanel --> GamePanel");

                //to grant that UI is updated before starting newGame
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        System.out.println(">> New Game Started from Start Panel");
                        ControllerForView.getInstance().requestStartGameLoop();
                    }
                });
            }
        });
        
    }