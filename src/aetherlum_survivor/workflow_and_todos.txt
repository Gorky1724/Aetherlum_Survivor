Qua è indicato il workflow e l'ordine di cose che stai facendo / lasciando in sospeso

___________________________________________________________________________________________________________________________
>> WORKFLOW
___________________________________________________________________________________________________________________________

- schermata di potenziamento
  scelte casuali(?) + possibilità di sbloccare altri attacchi (garantito ogni 5/10 livelli?)

->>> FUTURE

- implementare Panel di Level Up e, prima del GamePanel, Panel di selezione dello scenario
  > questo influenza lo sfondo della mappa, il numero di nemici e il tipo di nemici presenti

- quando ti ritroverai a dover fare il menù di pausa dal GamePanel
  > sappiamo che questo presenta gli attributi del personaggio
  > deve anche presentare le impostazioni
  > una volta ridirezionati al menù delle impostazioni, deve apparire un pulsante di ritorno
    magari basato sulla presenza di un status = GAMESTARTED --> if(status == GAMESTARTED) {dove int GAMESTARTED = 1;}
    che ridireziona non al menù principale ma al gioco precedentemente iniziato

- nel GamePanel, durante il gioco
  > scorciatoia (tipo premere P) per il menù di pausa E / O un pulsante che lo metta in pausa
    nel caso della scorciatoia, scriverlo
___________________________________________________________________________________________________________________________
>> TODO
___________________________________________________________________________________________________________________________
<STARTPANEL>
  -sistemare grafica del menù principale, inserire audio, inserie immagine di sfondo
  -Sistemare anche il Look&Feel con uno già creato con stile dark-fantasy
  - finalizzare il menù delle impostazioni, dove sarà possibile disattivare l'audio (e eventuali altre opzioni)

-OPTIONAL aggiungere al menù principale un bottone che ridiriga ad un panel di testo dove è presente una breve sinossi
 del gioco e di ciò che sta accadendo (paladini di Laertel che provano a controbattere le orde infinite della Piaga)


___________________________________________________________________________________________________________________________
>> ERRORI E PROBLEMATICHE RISCONTRATE
___________________________________________________________________________________________________________________________

---Ogni tanto non runna il codice correttamente e appare il seguente errore, poi risolto con il solo rerun dell'applicazione
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.awt.Container.setLayout(java.awt.LayoutManager)" because "this.contPane" 
is null
        at aetherlum_survivor.view.View.openStartPanel(View.java:51)
        at aetherlum_survivor.controller.ControllerForView.openStartPanel(ControllerForView.java:29)
        at aetherlum_survivor.controller.ControllerForView.startApplication(ControllerForView.java:24)
        at aetherlum_survivor.controller.Main.main(Main.java:6)
>>>risolto: il multithreading esegue startApplication() e openGamePanel(); openGamePanel è eseguito subito mentre startApplication ogni tanto attende un attimo
            dunque trova il contPane = null
---

---A non far interferire il thread del GameLoop con l'apertura del GamePanel
Ho risolto usando un timer
---

---Su ControllerForView e ControllerForModel erano separati, come nell'app JTetris fornita dal professore
Poiché erano così presenti alcuni metodi che non facevano altro che rimandare da un Controller ad un altro
in un primo momento ho fatto si che il ControllerForX vedesse sempre solo comandi da X ma potesse interagire direttametne con Y
Poi ho unito i 2 Controller in un controller unico valido sia per Model che per View
---

---Inizialmente volevo usare il KeyListener: Mettere il keylistener su Controller non lo faceva poi riconoscere da attachKeyListenerToGamePanel() come KeyListener ma solo come InterfaceController
Più che fare un cast esplicito a KeyListener ho deciso di creare una seconda classe del controller 'KeyHandler'
Poiché necessitavo della possibilità di dichiarare altri metodi per prendere le pressioni di tasti, ho comunque dovuto fare con cast esplicito a KeyHandler in quanto ne ho dovuto fare InterfaceKeyHandler
---

---Comprendere bene le relazioni tra componenti dell MVC
In particolare bene come in teoria il Model potrebbe notificare direttamente alla View tramite il pattern Observer di aggiornarsi.
Ho però deciso di utilizzare la variante dell'MVC Controller presentata dal professore sul jtetris per
far intermediare tale passaggio al Controller, semplificando così l'interazione
---

---creazione di pool di oggetti per la creazione di entità
minimizzare così il numero di oggetti creati per appesantire il meno possibile le operazioni
---

___________________________________________________________________________________________________________________________
>> COSE USATE FORSE NON FATTE A LEZIONE
___________________________________________________________________________________________________________________________

<CardLayout> per alternare con pulizia trai vari panel

<Thread> per istanziare il GameLoop